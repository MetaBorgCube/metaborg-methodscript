module desugar

imports
	src-gen/signatures/-

signature
	sorts
		UnOp
		UnExp
		BinOp
		BinExp
	
	constructors
		
		// Shared.
		UnExp : UnOp * Exp -> UnExp
		BinExp : BinOp * Exp * Exp -> BinExp
		
		// ArrayHandling.
		ArrayPush : Exp * Exp -> ArrayPush
		
		// BasicLogic.
		And     : BinOp
		Or      : BinOp
		Dand    : BinOp
		Dor     : BinOp
		Not     : UnOp
		
		Equals  : BinOp
		Sequals : BinOp
		
		Lt      : BinOp
		Lte     : BinOp
		Gt      : BinOp
		Gte     : BinOp
		
		// ControlFlow.
		IfElse : [IfElseIfBlock] * IfElseBlock -> IfElse
		DoWhile : Exp * [Statement] -> DoWhile
		For : Exp * Exp * Statement * [Statement] * [Statement] -> For
		ForEach : IVAR * IVAR * Exp * [Statement] * [Statement] -> ForEach
		Break : Exp -> Break
		Continue : Exp -> Continue
		Return : Exp -> Return
		Die : Exp -> Die
		
		// DataHandling.
		Array : [ArrayEntry] -> Array
		AssocArray : [ArrayEntry] -> AssocArray
		
		// EventBinding.
		Cancel : Exp -> Cancel
		Consume : Consume
		Lock : [Exp] -> Lock
		
		// Exceptions.
		// None.
		
		// Math.
		Add      : BinOp
		Subtract : BinOp
		Multiply : BinOp
		Divide   : BinOp
		Mod      : BinOp
		Pow      : BinOp
		Neg      : UnOp
		
		Inc     : UnOp
		PostInc : UnOp
		Dec     : UnOp
		PostDec : UnOp
		
		// StringHandling.
		Concat : BinOp

strategies
	desugar-all = innermost(desugar)

rules
	
	// Desugar semicolon out of SExp statements.
	desugar: SExp(e, _) -> SExp(e)
	
	// Desugar SExp nodes.
	desugar: SExp(e) -> e
	
	// Desugar ArrayHandling nodes.
	desugar: ArrayPush(array, val, _)        -> ArrayPush(array, val)
	desugar: ArrayPushLegacy(array, val, _)  -> ArrayPush(array, val)
	desugar: ArrayCloneLegacy(array)         -> ArrayClone(array)
	desugar: ArrayGetLegacy(array, ind)      -> ArrayGet(array, ind)
	desugar: ArraySetLegacy(array, ind, val) -> ArraySet(array, ind, val)
	
	// Desugar BasicLogic nodes.
	desugar: AndLegacy(e1, e2)  -> And(e1, e2)
	desugar: OrLegacy(e1, e2)   -> Or(e1, e2)
	desugar: DandLegacy(e1, e2) -> Dand(e1, e2)
	desugar: DorLegacy(e1, e2)  -> Dor(e1, e2)
	desugar: NotLegacy(e1)      -> Not(e1)
	
	desugar: NandLegacy(e1, e2) -> Not(And(e1, e2))
	desugar: NorLegacy(e1, e2)  -> Not(Or(e1, e2))
	
	desugar: EqualsLegacy(e1, e2)     -> Equals(e1, e2)
	desugar: NotEqualsLegacy(e1, e2)  -> NotEquals(e1, e2)
	desugar: SequalsLegacy(e1, e2)    -> Sequals(e1, e2)
	desugar: NotSequalsLegacy(e1, e2) -> NotSequals(e1, e2)
	
	desugar: NotEquals(e1, e2)  -> Not(Equals(e1, e2))
	desugar: NotSequals(e1, e2) -> Not(Sequals(e1, e2))
	
	desugar: LtLegacy(e1, e2)  -> Lt(e1, e2)
	desugar: LteLegacy(e1, e2) -> Lte(e1, e2)
	desugar: GtLegacy(e1, e2)  -> Gt(e1, e2)
	desugar: GteLegacy(e1, e2) -> Gte(e1, e2)
	
	desugar: And(e1, e2)  -> BinExp(And(), e1, e2)
	desugar: Or(e1, e2)   -> BinExp(Or(), e1, e2)
	desugar: Dand(e1, e2) -> BinExp(Dand(), e1, e2)
	desugar: Dor(e1, e2)  -> BinExp(Dor(), e1, e2)
	desugar: Not(e)       -> UnExp(Not(), e)
	
	desugar: Equals(e1, e2)  -> BinExp(Equals(), e1, e2)
	desugar: Sequals(e1, e2) -> BinExp(Sequals(), e1, e2)
	
	desugar: Lt(e1, e2)  -> BinExp(Lt(), e1, e2)
	desugar: Lte(e1, e2) -> BinExp(Lte(), e1, e2)
	desugar: Gt(e1, e2)  -> BinExp(Gt(), e1, e2)
	desugar: Gte(e1, e2) -> BinExp(Gte(), e1, e2)
	
	// Desugar ControlFlow nodes.
	// Desugar legacy 'if' to IfElse(ifBlocks, elseCode).
	desugar: IfLegacy(cond, ifCode, elseCode, _) -> IfElse([IfElseIfBlock(cond, ifCode)], elseCode)
	
	// Desugar 'ifelse' to IfElse(ifBlocks, elseCode).
	desugar: IfElse(cond, ifCode, ifBlocks, elseCode) -> IfElse(ifBlocks', elseCode)
		where ifBlocks' := <concat> [ifBlocks, [IfElseIfBlock(cond, ifCode)]]
	desugar: IfElseBlock(code) -> code
	
	desugar: IfElseLegacy(cond, ifCode, ifBlocks, elseCode, _) -> IfElse(ifBlocks', elseCode)
		where ifBlocks' := <concat> [ifBlocks, [IfElseIfBlock(cond, ifCode)]]
	desugar: IfElseIfBlockLegacy(cond, code) -> IfElseIfBlock(cond, code)
	desugar: IfElseBlockLegacy(code) -> IfElseBlock(code)
	
	// Desugar 'while' to While(cond, code).
	desugar: WhileLegacy(cond, code, _) -> While(cond, code)
	
	// Desugar 'dowhile' to DoWhile(code, cond).
	desugar: DoWhile(code, cond, _)       -> DoWhile(code, cond)
	desugar: DoWhileLegacy(code, cond, _) -> DoWhile(code, cond)
	
	// Desugar 'for' to For(assign, cond, exp, code, elseCode).
	desugar: For(assign, cond, exp, code)                        -> For(assign, cond, exp, code, None())
	desugar: ForLegacy(assign, cond, exp, code, _)               -> For(assign, cond, exp, code, None())
	desugar: ForElse(assign, cond, exp, code, elseCode)          -> For(assign, cond, exp, code, elseCode)
	desugar: ForElseLegacy(assign, cond, exp, code, elseCode, _) -> For(assign, cond, exp, code, elseCode)
	
	// Desugar 'foreach' to ForEach(key, val, array, code, elseCode).
	desugar: ForEach1(val, array, code)                             -> ForEach(None(), val, array, code, None())
	desugar: ForEach2(array, val, code)                             -> ForEach(None(), val, array, code, None())
	desugar: ForEach3(array, val, code)                             -> ForEach(None(), val, array, code, None())
	desugar: ForEach4(key, val, array, code)                        -> ForEach(key   , val, array, code, None())
	desugar: ForEach5(array, key, val, code)                        -> ForEach(key   , val, array, code, None())
	desugar: ForEachLegacy1(array, val, code, _)                    -> ForEach(None(), val, array, code, None())
	desugar: ForEachLegacy2(array, key, val, code, _)               -> ForEach(key   , val, array, code, None())
	desugar: ForEachElse1(val, array, code, elseCode)               -> ForEach(None(), val, array, code, elseCode)
	desugar: ForEachElse2(array, val, code, elseCode)               -> ForEach(None(), val, array, code, elseCode)
	desugar: ForEachElse3(array, val, code, elseCode)               -> ForEach(None(), val, array, code, elseCode)
	desugar: ForEachElse4(key, val, array, code, elseCode)          -> ForEach(key   , val, array, code, elseCode)
	desugar: ForEachElse5(array, key, val, code, elseCode)          -> ForEach(key   , val, array, code, elseCode)
	desugar: ForEachElseLegacy1(array, val, code, elseCode, _)      -> ForEach(None(), val, array, code, elseCode)
	desugar: ForEachElseLegacy2(array, key, val, code, elseCode, _) -> ForEach(key   , val, array, code, elseCode)
	
	// Desugar 'switch' to Switch(exp, cases, defaultCode) and SwitchExp(exp, cases, defaultExp).
	desugar: SwitchLabel(val)                        -> val
	desugar: SwitchDefault(code)                     -> code
	
	desugar: SwitchExpDefault(exp)                   -> exp
	
	desugar: SwitchLegacy(exp, cases, defaultCode)   -> Switch(exp, cases, defaultCode)
	desugar: SwitchCaseLegacy(vals, code)            -> SwitchCase(vals, code)
	desugar: SwitchDefaultLegacy(code)               -> code
	desugar: SwitchLabelLegacy(Array(vals))          -> vals
	desugar: SwitchLabelLegacy(val)                  -> [val]
	
	desugar: SwitchExpLegacy(exp, cases, defaultExp) -> SwitchExp(exp, cases, defaultExp)
	desugar: SwitchExpCaseLegacy(vals, exp)          -> SwitchExpCase(vals, exp)
	desugar: SwitchExpDefaultLegacy(exp)             -> exp
	
	// Desugar semicolons from ControlFlow statements.
	desugar: Break(numLoops, _)    -> Break(numLoops)
	desugar: Continue(numLoops, _) -> Continue(numLoops)
	desugar: Return(exp, _)        -> Return(exp)
	desugar: Die(exp, _)           -> Die(exp)
	
	// Desugar ternary operator.
	desugar: TernaryLegacy(cond, v1, v2) -> Ternary(cond, v1, v2)
	
	// Desugar DataHandling nodes.
	// Desugar 'proc' to ProcDecl(name, vars, code).
	desugar: ProcDecl2(name, params, code)         -> ProcDecl(name, params, code)
	desugar: ProcDeclLegacy(name, params, code, _) -> ProcDecl(name, params, code)
	desugar: ProcParam(param)                      -> param
	desugar: ProcIdArgString(procName)             -> procName
	desugar: ProcIdArgSmartString(procName)        -> procName
	desugar: ProcIdArgBareString(procName)         -> procName
	
	// Desugar 'array' and 'associative_array'.
	desugar: Array(vals, _)      -> Array(vals)
	desugar: AssocArray(vals, _) -> AssocArray(vals)
	desugar: ArrayValEntry(exp) -> exp
	
	// Desugar 'closure' types.
	desugar: ClosureLegacy(params, code, _)  -> Closure(params, code)
	desugar: IClosureLegacy(params, code, _) -> IClosure(params, code)
	desugar: RClosureLegacy(params, code, _) -> RClosure(params, code)
	desugar: ClosureParam(param)             -> param
	
	// Desugar 'assign'.
	desugar: IVarAddAssign(ivarName, exp)      -> IVarAssign(IVar(ivarName), Add(IVar(ivarName), exp))
	desugar: IVarSubtractAssign(ivarName, exp) -> IVarAssign(IVar(ivarName), Subtract(IVar(ivarName), exp))
	desugar: IVarMultiplyAssign(ivarName, exp) -> IVarAssign(IVar(ivarName), Multiply(IVar(ivarName), exp))
	desugar: IVarDivideAssign(ivarName, exp)   -> IVarAssign(IVar(ivarName), Divide(IVar(ivarName), exp))
	desugar: IVarConcatAssign(ivarName, exp)   -> IVarAssign(IVar(ivarName), Concat(IVar(ivarName), exp))
	
	// Desugar EventBinding nodes.
	desugar: Cancel(exp, _) -> Cancel(exp)
	desugar: Consume(_) -> Consume()
	desugar: Lock(exps, _) -> Lock(exps)
	
	// Desugar 'bind' to Bind(name, prio, filter, var, params, code).
	desugar: BindLegacy(name, prio, filter, var, params, code) -> Bind(name, prio, filter, var, params, code)
	desugar: BindParam(param)                                  -> param
	
	desugar: ModifyEventArg(arg) -> arg
	
	// Desugar Math nodes.
	desugar: AddLegacy(e1, e2)      -> Add(e1, e2)
	desugar: SubtractLegacy(e1, e2) -> Subtract(e1, e2)
	desugar: MultiplyLegacy(e1, e2) -> Multiply(e1, e2)
	desugar: DivideLegacy(e1, e2)   -> Divide(e1, e2)
	desugar: ModLegacy(e1, e2)      -> Mod(e1, e2)
	desugar: PowLegacy(e1, e2)      -> Pow(e1, e2)
	desugar: NegLegacy(exp)         -> Neg(exp)
	
	desugar: IncLegacy(exp)     -> Inc(exp)
	desugar: PostIncLegacy(exp) -> PostInc(exp)
	desugar: DecLegacy(exp)     -> Dec(exp)
	desugar: PostDecLegacy(exp) -> PostDec(exp)
	
	desugar: Add(e1, e2)      -> BinExp(Add(), e1, e2)
	desugar: Subtract(e1, e2) -> BinExp(Subtract(), e1, e2)
	desugar: Multiply(e1, e2) -> BinExp(Multiply(), e1, e2)
	desugar: Divide(e1, e2)   -> BinExp(Divide(), e1, e2)
	desugar: Mod(e1, e2)      -> BinExp(Mod(), e1, e2)
	desugar: Pow(e1, e2)      -> BinExp(Pow(), e1, e2)
	desugar: Neg(e)           -> UnExp(Neg(), e)
	desugar: UnExp(Neg(), UnExp(Neg(), e)) -> Dec(e) // Desugar <--<Exp>> to dec().
	
	desugar: Inc(exp)     -> UnExp(Inc(), exp)
	desugar: PostInc(exp) -> UnExp(PostInc(), exp)
	desugar: Dec(exp)     -> UnExp(Dec(), exp)
	desugar: PostDec(exp) -> UnExp(PostDec(), exp)
	
	// Desugar StringHandling nodes.
	// Desugar 'concat(arg1, arg2, ...)' to Concat(Concat(arg1, arg2), arg3).
	desugar: ConcatLegacy([arg | []]) -> arg
	desugar: ConcatLegacy(args) -> Concat(ConcatLegacy(head), tail)
		where [tail | reverseHead] := <reverse> args
		where head := <reverse> reverseHead
	
	desugar: Concat(e1, e2) -> BinExp(Concat(), e1, e2)
