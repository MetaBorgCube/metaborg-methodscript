module analysis/Variables

rules
	
	// Variable references.
	[[ IVar(varName) ^ (s, s', s_branch, s_global) : t ]] :=
		IVar{varName} -> s, // varName is a reference in s.
		IVar{varName} |-> d | error $[Cannot find variable: [varName]],
		d : t.
	[[ Var(varName) ^ (s, s', s_branch, s_global) : t ]] :=
		Var{varName} -> s, // varName is a reference in s.
		Var{varName} |-> d | error $[Cannot find variable: [varName]],
		d : t.
	
	// Variable assigns/declarations.
	[[ IVarAssign(Some(cType), varName, valExp) ^ (s, s', s_branch, s_global) : valType ]] :=
		
		// Resolve variable type.
		ClassType{cType} -> s_global,
		ClassType{cType} |-> cTypeDecl | error $[Unknown class type: [cType]] @cType,
		cTypeDecl : ClassType(declType),
		
		// Declare typed variable.
		TypedIVar{varName} <- s',
		TypedIVar{varName} : declType,
		
		// TODO - Not possible due to IVar{varName} already being defined in 's' in this IVarAssign code?
//		// Give a warning when an untyped variable declaration already exists for this varName.
//		new s_fvar,
//		new s_fvar2,
//		s_fvar -P-> s,
//		s_fvar -LP-> s_fvar2,
//		IVar{varName@s_fvar2} <- s_fvar2,
//		IVar{varName@s_fvar2} : FakeType(),
//		IVar{varName} -> s_fvar,
//		IVar{varName} |-> varDecl,
//		varDecl : varFakeType,
//		varFakeType == FakeType() | warning $[[varName] was already defined] @varName,
		
		// Disallow duplicate typed variable declarations.
		distinct/name W(s')/TypedIVar | error $[Duplicate variable declaration: [NAME]] @NAMES,
		
		// Resolve and type check assigned value.
		[[ valExp ^ (s, s', s_branch, s_global) : valType ]],
		valType <? declType | error $[Type mismatch: Cannot convert from [valType] to [declType]] @valExp,
		
		// Declare variable assign.
		IVar{varName} <- s',
		IVar{varName} : valType,
		
		// Declare variable assign in extra scope.
		// TODO - Look up the current type in s_branch and somehow create a union type from that instead of declaring as Any().
		// TODO - Note that this variable cannot be declared before the branching statement since it's a typed declaration.
		IVar{varName@s_branch} <- s_branch,
		IVar{varName@s_branch} : Any().
	
	[[ IVarAssign(None(), varName, valExp) ^ (s, s', s_branch, s_global) : Any() ]] :=
		
		// Fake a typed variable declaration to set a default variable type.
		new s_fvar,
		new s_fvar2,
		s_fvar -P-> s,
		s_fvar -LP-> s_fvar2,
		TypedIVar{varName} <- s_fvar2,
		TypedIVar{varName} : Mixed(),
		
		// Get variable declaration type.
		TypedIVar{varName} -> s_fvar,
		TypedIVar{varName} |-> typedVarDecl,
		typedVarDecl : declType,
		
		// Resolve and type check the value expression.
		[[ valExp ^ (s, s', s_branch, s_global) : valType ]],
		valType <? declType | error $[Type mismatch: Cannot convert from [valType] to [declType]] @valExp,
		
		// Declare variable assign.
		IVar{varName} <- s',
		IVar{varName} : valType,
		
		// Declare variable assign in extra scope.
		// TODO - Look up the current type in s_branch and somehow create a union type from that instead of declaring as Any().
		// TODO - When this has a type, ensure that if the code before a branch assigns a type, this type is also considered.
		IVar{varName@s_branch} <- s_branch,
		IVar{varName@s_branch} : Any().
	
	// IVariable parameters.
	// With 1 scope, the param is declared and resolved in the same scope.
	// With 2 scopes, the param is declared in the second scope and its value resolved in the first.
	[[ IVarParam(Some(cType), varName) ^ (s, s', s_branch, s_global) : declType ]] :=
		
		// Resolve variable type.
		ClassType{cType} -> s_global,
		ClassType{cType} |-> cTypeDecl | error $[Unknown class type: [cType]] @cType,
		cTypeDecl : ClassType(declType),
		
		// Declare typed variable.
		TypedIVar{varName} <- s',
		TypedIVar{varName} : declType,
		
		// TODO - Not possible due to IVar{varName} already being defined in 's' in this IVarAssign code?
//		// Give a warning when an untyped variable declaration already exists for this varName.
//		new s_fvar,
//		new s_fvar2,
//		s_fvar -P-> s,
//		s_fvar -LP-> s_fvar2,
//		IVar{varName@s_fvar2} <- s_fvar2,
//		IVar{varName@s_fvar2} : FakeType(),
//		IVar{varName} -> s_fvar,
//		IVar{varName} |-> varDecl,
//		varDecl : varFakeType,
//		varFakeType == FakeType() | warning $[[varName] was already defined] @varName,
		
		// Disallow duplicate typed variable declarations.
		distinct/name W(s')/TypedIVar | error $[Duplicate variable declaration: [NAME]] @NAMES,
		
		// Declare variable assign.
		IVar{varName} <- s',
		IVar{varName} : Any(),
		
		// Declare variable assign in extra scope.
		IVar{varName@s_branch} <- s_branch,
		IVar{varName@s_branch} : Any().
	
	[[ IVarParam(None(), varName) ^ (s, s', s_branch, s_global) : Mixed() ]] :=
		
		// Declare variable assign.
		IVar{varName} <- s',
		IVar{varName} : Any(),
		
		// Declare variable assign in extra scope.
		IVar{varName@s_branch} <- s_branch,
		IVar{varName@s_branch} : Any().
	
	[[ IVarAssignParam(Some(cType), varName, valExp) ^ (s, s', s_branch, s_global) : declType ]] :=
		
		// Resolve variable type.
		ClassType{cType} -> s_global,
		ClassType{cType} |-> cTypeDecl | error $[Unknown class type: [cType]] @cType,
		cTypeDecl : ClassType(declType),
		
		// Declare typed variable.
		TypedIVar{varName} <- s',
		TypedIVar{varName} : declType,
		
		// TODO - Not possible due to IVar{varName} already being defined in 's' in this IVarAssign code?
//		// Give a warning when an untyped variable declaration already exists for this varName.
//		new s_fvar,
//		new s_fvar2,
//		s_fvar -P-> s,
//		s_fvar -LP-> s_fvar2,
//		IVar{varName@s_fvar2} <- s_fvar2,
//		IVar{varName@s_fvar2} : FakeType(),
//		IVar{varName} -> s_fvar,
//		IVar{varName} |-> varDecl,
//		varDecl : varFakeType,
//		varFakeType == FakeType() | warning $[[varName] was already defined] @varName,
		
		// Disallow duplicate typed variable declarations.
		distinct/name W(s')/TypedIVar | error $[Duplicate variable declaration: [NAME]] @NAMES,
		
		// Resolve and type check assigned value.
		[[ valExp ^ (s, s', s_branch, s_global) : valType ]],
		valType <? declType | error $[Type mismatch: Cannot convert from [valType] to [declType]] @valExp,
		
		// Declare variable assign.
		IVar{varName} <- s',
		IVar{varName} : valType,
		
		// Declare variable assign in extra scope.
		// TODO - Look up the current type in s_branch and somehow create a union type from that instead of declaring as Any().
		// TODO - Note that this variable cannot be declared before the branching statement since it's a typed declaration.
		IVar{varName@s_branch} <- s_branch,
		IVar{varName@s_branch} : Any().
	
	[[ IVarAssignParam(None(), varName, valExp) ^ (s, s', s_branch, s_global) : Mixed() ]] :=
		
		// Fake a typed variable declaration to set a default variable type.
		new s_fvar,
		new s_fvar2,
		s_fvar -P-> s,
		s_fvar -LP-> s_fvar2,
		TypedIVar{varName} <- s_fvar2,
		TypedIVar{varName} : Mixed(),
		
		// Get variable declaration type.
		TypedIVar{varName} -> s_fvar,
		TypedIVar{varName} |-> typedVarDecl,
		typedVarDecl : declType,
		
		// Resolve and type check the value expression.
		[[ valExp ^ (s, s', s_branch, s_global) : valType ]],
		valType <? declType | error $[Type mismatch: Cannot convert from [valType] to [declType]] @valExp,
		
		// Declare variable assign.
		IVar{varName} <- s',
		IVar{varName} : valType,
		
		// Declare variable assign in extra scope.
		// TODO - Look up the current type in s_branch and somehow create a union type from that instead of declaring as Any().
		// TODO - When this has a type, ensure that if the code before a branch assigns a type, this type is also considered.
		IVar{varName@s_branch} <- s_branch,
		IVar{varName@s_branch} : Any().
	
	// TODO - Remove these IVarScopeParams and manage scoping in branching functions instead.
//	[[ IVarScopeParam(cType, varName) ^ (s_parent, s_params, s_global) : varType ]] :=
//		// TODO - Resolve cType (Some(str), None()) to a type and use this.
//		IVar{varName} <- s_params,
//		IVar{varName} : varType,
//		varType == Any().
//	
//	[[ IVarAssignScopeParam(cType, varName, valExp) ^ (s_parent, s_params, s_global) : varType ]] :=
//		// TODO - Resolve cType (Some(str), None()) to a type and use this.
//		IVar{varName} <- s_params,
//		IVar{varName} : varType,
//		[[ valExp ^ (s_parent, _, _, s_global) : valType ]],
//		varType == Any().
