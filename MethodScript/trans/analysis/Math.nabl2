module analysis/Math

rules
	
	// Unary expressions.
	[[ UnExp(Neg(), exp) ^ (s, s', s_branch, s_global) : Any() ]] :=
		[[ exp ^ (s, s', s_branch, s_global) : expType ]],
		expType <? Number() | error $[Expected number, found [expType]] @exp.
	
	[[ UnExp(Inc(), exp) ^ (s, s', s_branch, s_global) : retType ]] :=
		[[ exp ^ (s, s', s_branch, s_global) : expType ]],
		expType <? Number() | error $[Expected number, found [expType]] @exp,
		retType is incdecMathOpRetType of expType.
	[[ UnExp(Dec(), exp) ^ (s, s', s_branch, s_global) : retType ]] :=
		[[ exp ^ (s, s', s_branch, s_global) : expType ]],
		expType <? Number() | error $[Expected number, found [expType]] @exp,
		retType is incdecMathOpRetType of expType.
	[[ UnExp(PostInc(), exp) ^ (s, s', s_branch, s_global) : retType ]] :=
		[[ exp ^ (s, s', s_branch, s_global) : expType ]],
		expType <? Number() | error $[Expected number, found [expType]] @exp,
		retType is incdecMathOpRetType of expType.
	[[ UnExp(PostDec(), exp) ^ (s, s', s_branch, s_global) : retType ]] :=
		[[ exp ^ (s, s', s_branch, s_global) : expType ]],
		expType <? Number() | error $[Expected number, found [expType]] @exp,
		retType is incdecMathOpRetType of expType.
	
	// Binary expressions.
	[[ BinExp(Add(), e1, e2) ^ (s, s', s_branch, s_global) : t ]] :=
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]],
		t1 <? Number() | error $[Expected number, found [t1]] @e1,
		t2 <? Number() | error $[Expected number, found [t2]] @e2,
		t is binMathOpRetType of (t1, t2).
	
	[[ BinExp(Subtract(), e1, e2) ^ (s, s', s_branch, s_global) : t ]] :=
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]],
		t1 <? Number() | error $[Expected number, found [t1]] @e1,
		t2 <? Number() | error $[Expected number, found [t2]] @e2,
		t is binMathOpRetType of (t1, t2).
	
	[[ BinExp(Multiply(), e1, e2) ^ (s, s', s_branch, s_global) : t ]] :=
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]],
		t1 <? Number() | error $[Expected number, found [t1]] @e1,
		t2 <? Number() | error $[Expected number, found [t2]] @e2,
		t is binMathOpRetType of (t1, t2).
	
	[[ BinExp(Divide(), e1, e2) ^ (s, s', s_branch, s_global) : t ]] :=
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]],
		t1 <? Number() | error $[Expected number, found [t1]] @e1,
		t2 <? Number() | error $[Expected number, found [t2]] @e2,
		t is divMathOpRetType of (t1, t2).
	
	[[ BinExp(Mod(), e1, e2) ^ (s, s', s_branch, s_global) : Int() ]] :=
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]],
		t1 <? Int() | error $[Expected int, found [t1]] @e1,
		t2 <? Int() | error $[Expected int, found [t2]] @e2.
	
	[[ BinExp(Pow(), e1, e2) ^ (s, s', s_branch, s_global) : Double() ]] :=
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]],
		t1 <? Number() | error $[Expected number, found [t1]] @e1,
		t2 <? Number() | error $[Expected number, found [t2]] @e2.
