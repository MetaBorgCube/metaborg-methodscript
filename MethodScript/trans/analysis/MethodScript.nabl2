module analysis/MethodScript

imports
	// NaBL2 files cannot be imported using '/-' as this ignores function declarations and causes failing builds.
	signatures/-
	analysis/ArrayHandling
	analysis/BasicLogic
	analysis/Commands
	analysis/ControlFlow
	analysis/DataHandling
	analysis/EventBinding
	analysis/Exceptions
	analysis/Functions
	analysis/Init
	analysis/Math
	analysis/Procedures
	analysis/Program
	analysis/StringHandling
	analysis/Types
	analysis/Variables

/*
 * Scope management.
 *
 * Global scope:
 *     A global scope is used to create procedure declarations and references in.
 *     This scope should not have edges to other scopes.
 *
 * Statements and expressions scoping:
 *     Statements and expressions get two non-shared linked main scopes, being s and s'. By convention, s is used for
 *     references and s' is used for declarations. This allows for example the IVarAssign term to add a reference to
 *     check whether a type for it has been set yet, and also declare a type, without resolving to itself.
 *     Scopes are linked as follows: s1 <-P- s1' <-P- s2 <-P- s2'.
 *
 * Branching:
 *     Statements and expressions have an extra non-shared scope s_branch to allow for references after a branching
 *     statement or expression to resolve to the last declaration in that branching statement or expression.
 *     These scopes are linked as follows: s_branch1 -IB-> s_branch2 -IB-> s_branch3 (note that they resolve in later
 *     code and use an IB (Internal Branch) label).
 *     Branching statements or expressions that have branches with code that can be referred to after that statement
 *     or expression should create a new s_branch' scope that is connected with a NB (New Branch) label to the side of
 *     the s_branch scope chain. Additionally, an edge with label BR (Branch Resolving) should be added from the
 *     s' scope to the new s_branch' scope (s_branch' <-BR- s') to allow code after the branching statement or
 *     expression to resolve to declarations made in the code branches.
 *     Not that for variable declarations an IVar{varName} : Any() declaration has to be used, as the last type might
 *     not be the actual type after the branching statement or expression. Ideally, this should be declared with a
 *     union type that contains all possible types of the variable at the end of the branching statement or expression.
 */

signature
	
	// Functions that cannot be in their own file due to a NaBL2 bug.
	functions
		
		// Math functions.
		
		// Binary math operation return type.
		binMathOpRetType : (Type * Type) -> Type {
			(Int()   , Int())    -> Int(),
			(Double(), _)        -> Double(),
			(_       , Double()) -> Double(),
			(_       , _)        -> IntOrDouble()
		}
		
		// Divide math operation return type.
		divMathOpRetType : (Type * Type) -> Type {
			(Int()   , Int())    -> IntOrDouble(),
			(Double(), _)        -> Double(),
			(_       , Double()) -> Double(),
			(_       , _)        -> IntOrDouble()
		}
		
		// inc/dec/postinc/postdec math operation return type.
		incdecMathOpRetType : Type -> Type {
			Int()    -> Int(),
			Double() -> Double(),
			_        -> IntOrDouble()
		}
		
	name resolution
		labels
			P // Default scope edge label (s1 -P-> s2 === s1 ---> s2).
			I // Default scope association label (occ ===> s === occ =I=> s).
			LP // Low priority scope edge label.
			IB // Branch scope edge label (for connecting the branch scope chain).
			LB // Low priority Branch scope edge label (IB, but with lower priority). 
			NB // New Branch scope edge label (for branches from the branch scope chain).
			BR // Branch Resolving scope edge label (for linking normal scopes to branch scopes).
		
		order
			D < P,
			D < I,
			I < P,
			D < LP,
			I < LP,
			P < LP,
			
			BR < P, // Prioritize branch resolve scope over the normal scope chain.
			D < BR, // Prioritize declarations over branch resolve scopes.
			IB < NB, // Prioritize branch scope chain over its branches.
			D < IB, // Prioritize declarations over internal branch scopes.
			LB < NB,
			IB < LB
		
		well-formedness
			P* (LP | BR ((IB|LB)* NB)* (IB|LB)*)?
	
	namespaces Var IVar TypedIVar Proc ClassType
	
	constructors
		ClassType : Type -> ClassType

rules
	
	// Double Scope Mapping rule with two additional scopes that will directly be passed on.
	// The first two scopes are linked such that s1 <- s1' <- s2 <- s2'.
	// The branch scopes are linked such that s_branch1 -> s_branch2.
	DSMap4T[[ [x|xs] ^ (_, s', s_branch, s_global) : [ty|tys] ]] :=
		new s2,
		new s2',
		s2 -P-> s',
		s2' -P-> s2,
		new s_branch',
		s_branch -IB-> s_branch',
		[[ x ^ (s2, s2', s_branch', s_global) : ty ]],
		DSMap4T[[ xs ^ (s2, s2', s_branch', s_global) : tys ]].
	
	Map4T[[ [x|xs] ^ (s1, s2, s3, s4) : [ty|tys] ]] :=
		[[ x ^ (s1, s2, s3, s4) : ty ]],
		Map4T[[ xs ^ (s1, s2, s3, s4) : tys ]].
	
	// Branch Scope Mapping rule. Creates a new branch scope per term.
	BSMap3T[[ [x|xs] ^ (s, s_branch, s_global) : [ty|tys] ]] :=
		new s_branch',
		s_branch -IB-> s_branch',
		[[ x ^ (s, s_branch', s_global) : ty ]],
		BSMap3T[[ xs ^ (s, s_branch', s_global) : tys ]].
	BSMap3[[ [x|xs] ^ (s, s_branch, s_global) ]] :=
		new s_branch',
		s_branch -IB-> s_branch',
		[[ x ^ (s, s_branch', s_global) ]],
		BSMap3[[ xs ^ (s, s_branch', s_global) ]].
	
	// Static values.
	[[ IntVal(_) ^ (s, s', s_branch, s_global) : Int() ]].
	[[ DoubleVal(_) ^ (s, s', s_branch, s_global) : Double() ]].
	[[ StringVal(_) ^ (s, s', s_branch, s_global) : String() ]].
	[[ SmartStringVal(_) ^ (s, s', s_branch, s_global) : String() ]].
	[[ ClassTypeVal(_) ^ (s, s', s_branch, s_global) : ClassType() ]].
	[[ True() ^ (s, s', s_branch, s_global) : Boolean() ]].
	[[ False() ^ (s, s', s_branch, s_global) : Boolean() ]].
	[[ Null() ^ (s, s', s_branch, s_global) : Null() ]].
	
	// Unary and binary expressions.
	[[ UnExp(_, e) ^ (s, s', s_branch, s_global) : Any() ]] :=
		[[ e ^ (s, s', s_branch, s_global) : t1 ]].
	[[ BinExp(Add(), e1, e2) ^ (s, s', s_branch, s_global) : t ]] := // TODO - Determine how to implement + move Math section?
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]],
//		t1 <? Number(),
//		t2 <? Number(),
		t is binOpNumberType of (t1, t2). // TODO - Apply to all BinOps that take numbers like this.
	[[ BinExp(_, e1, e2) ^ (s, s', s_branch, s_global) : Any() ]] :=
		[[ e1 ^ (s, s', s_branch, s_global) : t1 ]],
		[[ e2 ^ (s, s', s_branch, s_global) : t2 ]].
	
	// Generic optional node argument.
	[[ None() ^ (s, s', s_branch, s_global) : _ ]] :=
		true.
	
	// Statement brackets.
	[[ Block(statements) ^ (s, s', s_branch, s_global) : _ ]] :=
		DSMap4T[[ statements ^ (s, s', s_branch, s_global) : _ ]].
