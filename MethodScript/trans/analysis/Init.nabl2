module analysis/Init

rules
	
	// Global initialization rule.
	init ^ (s_global) :=
		
		// Initialize global scope.
		new s_global,
		
		// Class type relations.
		// Child  <! Parent: "Child can be used as Parent".
		// This section is auto-generated and should only be changed through the generator.
		AccessModifier()                  <! Enum(),
		AccessModifier()                  <! Iterable(),
		Any()                             <! Null(),
		Array()                           <! Booleanish(),
		Array()                           <! Iterable(),
		Array()                           <! Mixed(),
		ArrayAccess()                     <! Mixed(),
		ArrayIntersectComparisonMode()    <! Enum(),
		ArrayIntersectComparisonMode()    <! Iterable(),
		ArraySortType()                   <! Enum(),
		ArraySortType()                   <! Iterable(),
		Barestring()                      <! String(),
		BindException()                   <! Exception(),
		Boolean()                         <! Primitive(),
		Booleanish()                      <! Mixed(),
		ByteArrayReadOnlyException()      <! ReadOnlyException(),
		ByteBackingArray()                <! Array(),
		Byte_array()                      <! Array(),
		Byte_array()                      <! ArrayAccess(),
		Byte_array()                      <! Sizeable(),
		CastException()                   <! Exception(),
		ClassDefinitionError()            <! Error(),
		ClassType()                       <! Iterable(),
		ClassType()                       <! Mixed(),
		Closure()                         <! Mixed(),
		Decimal()                         <! Primitive(),
		Double()                          <! Number(),
		ElementModifier()                 <! Enum(),
		ElementModifier()                 <! Iterable(),
		Enum()                            <! Iterable(),
		Enum()                            <! Mixed(),
		Error()                           <! Throwable(),
		EventException()                  <! Exception(),
		Exception()                       <! Throwable(),
		FileWriteMode()                   <! Enum(),
		FileWriteMode()                   <! Iterable(),
		FindType()                        <! Enum(),
		FindType()                        <! Iterable(),
		FormatException()                 <! Exception(),
		IOException()                     <! Exception(),
		Iclosure()                        <! Closure(),
		IllegalArgumentException()        <! Exception(),
		IncludeException()                <! Exception(),
		IndexOverflowException()          <! Exception(),
		InsufficientArgumentsException()  <! Exception(),
		InsufficientPermissionException() <! Exception(),
		Int()                             <! Number(),
		IntOrDouble()                     <! Double(),
		IntOrDouble()                     <! Int(),
		InvalidProcedureException()       <! Exception(),
		Iterable()                        <! ArrayAccess(),
		Iterable()                        <! Sizeable(),
		LengthException()                 <! Exception(),
		MathConstants()                   <! Enum(),
		MathConstants()                   <! Iterable(),
		Method()                          <! Mixed(),
		Mutable_primitive()               <! Array(),
		Mutable_primitive()               <! Sizeable(),
		NotFoundException()               <! Exception(),
		Null()                            <! AccessModifier(),
		Null()                            <! Array(),
		Null()                            <! ArrayAccess(),
		Null()                            <! ArrayIntersectComparisonMode(),
		Null()                            <! ArraySortType(),
		Null()                            <! Barestring(),
		Null()                            <! BindException(),
		Null()                            <! Boolean(),
		Null()                            <! Booleanish(),
		Null()                            <! ByteArrayReadOnlyException(),
		Null()                            <! ByteBackingArray(),
		Null()                            <! Byte_array(),
		Null()                            <! CastException(),
		Null()                            <! ClassDefinitionError(),
		Null()                            <! ClassType(),
		Null()                            <! Closure(),
		Null()                            <! Decimal(),
		Null()                            <! Double(),
		Null()                            <! ElementModifier(),
		Null()                            <! Enum(),
		Null()                            <! Error(),
		Null()                            <! EventException(),
		Null()                            <! Exception(),
		Null()                            <! FileWriteMode(),
		Null()                            <! FindType(),
		Null()                            <! FormatException(),
		Null()                            <! IOException(),
		Null()                            <! Iclosure(),
		Null()                            <! IllegalArgumentException(),
		Null()                            <! IncludeException(),
		Null()                            <! IndexOverflowException(),
		Null()                            <! InsufficientArgumentsException(),
		Null()                            <! InsufficientPermissionException(),
		Null()                            <! Int(),
		Null()                            <! InvalidProcedureException(),
		Null()                            <! Iterable(),
		Null()                            <! LengthException(),
		Null()                            <! MathConstants(),
		Null()                            <! Method(),
		Null()                            <! Mixed(),
		Null()                            <! Mutable_primitive(),
		Null()                            <! NotFoundException(),
		Null()                            <! NullPointerException(),
		Null()                            <! Number(),
		Null()                            <! OAuthException(),
		Null()                            <! ObjectModifier(),
		Null()                            <! ObjectType(),
		Null()                            <! Package(),
		Null()                            <! PluginInternalException(),
		Null()                            <! Primitive(),
		Null()                            <! RangeException(),
		Null()                            <! ReadOnlyException(),
		Null()                            <! Resource(),
		Null()                            <! SQLException(),
		Null()                            <! Secure_string(),
		Null()                            <! SecurityException(),
		Null()                            <! ShellException(),
		Null()                            <! Sizeable(),
		Null()                            <! Slice(),
		Null()                            <! StackOverflowError(),
		Null()                            <! String(),
		Null()                            <! Throwable(),
		Null()                            <! UUIDType(),
		Null()                            <! UnsupportedOperationException(),
		Null()                            <! ValueType(),
		NullPointerException()            <! Exception(),
		Number()                          <! Primitive(),
		OAuthException()                  <! Exception(),
		ObjectModifier()                  <! Enum(),
		ObjectModifier()                  <! Iterable(),
		ObjectType()                      <! Enum(),
		ObjectType()                      <! Iterable(),
		PluginInternalException()         <! Exception(),
		Primitive()                       <! Booleanish(),
		Primitive()                       <! Mixed(),
		Primitive()                       <! ValueType(),
		RangeException()                  <! Exception(),
		ReadOnlyException()               <! Exception(),
		Resource()                        <! Mixed(),
		SQLException()                    <! Exception(),
		Secure_string()                   <! String(),
		SecurityException()               <! Exception(),
		ShellException()                  <! Exception(),
		Sizeable()                        <! Mixed(),
		Slice()                           <! Array(),
		StackOverflowError()              <! Error(),
		String()                          <! Iterable(),
		String()                          <! Primitive(),
		Throwable()                       <! ArrayAccess(),
		Throwable()                       <! Mixed(),
		UUIDType()                        <! Enum(),
		UUIDType()                        <! Iterable(),
		UnsupportedOperationException()   <! Exception(),
		ValueType()                       <! Mixed(),
		
		// Class type declarations.
		// This section is auto-generated and should only be changed through the generator.
		ClassType{"AccessModifier"} <- s_global,
		ClassType{"AccessModifier"} : ClassType(AccessModifier()),
		ClassType{"array"} <- s_global,
		ClassType{"array"} : ClassType(Array()),
		ClassType{"ArrayAccess"} <- s_global,
		ClassType{"ArrayAccess"} : ClassType(ArrayAccess()),
		ClassType{"ArrayIntersectComparisonMode"} <- s_global,
		ClassType{"ArrayIntersectComparisonMode"} : ClassType(ArrayIntersectComparisonMode()),
		ClassType{"ArraySortType"} <- s_global,
		ClassType{"ArraySortType"} : ClassType(ArraySortType()),
		ClassType{"OAuthException"} <- s_global,
		ClassType{"OAuthException"} : ClassType(OAuthException()),
		ClassType{"barestring"} <- s_global,
		ClassType{"barestring"} : ClassType(Barestring()),
		ClassType{"BindException"} <- s_global,
		ClassType{"BindException"} : ClassType(BindException()),
		ClassType{"boolean"} <- s_global,
		ClassType{"boolean"} : ClassType(Boolean()),
		ClassType{"Booleanish"} <- s_global,
		ClassType{"Booleanish"} : ClassType(Booleanish()),
		ClassType{"byte_array"} <- s_global,
		ClassType{"byte_array"} : ClassType(Byte_array()),
		ClassType{"ByteArrayReadOnlyException"} <- s_global,
		ClassType{"ByteArrayReadOnlyException"} : ClassType(ByteArrayReadOnlyException()),
		ClassType{"ByteBackingArray"} <- s_global,
		ClassType{"ByteBackingArray"} : ClassType(ByteBackingArray()),
		ClassType{"CastException"} <- s_global,
		ClassType{"CastException"} : ClassType(CastException()),
		ClassType{"ClassDefinitionError"} <- s_global,
		ClassType{"ClassDefinitionError"} : ClassType(ClassDefinitionError()),
		ClassType{"ClassType"} <- s_global,
		ClassType{"ClassType"} : ClassType(ClassType()),
		ClassType{"closure"} <- s_global,
		ClassType{"closure"} : ClassType(Closure()),
		ClassType{"decimal"} <- s_global,
		ClassType{"decimal"} : ClassType(Decimal()),
		ClassType{"double"} <- s_global,
		ClassType{"double"} : ClassType(Double()),
		ClassType{"ElementModifier"} <- s_global,
		ClassType{"ElementModifier"} : ClassType(ElementModifier()),
		ClassType{"enum"} <- s_global,
		ClassType{"enum"} : ClassType(Enum()),
		ClassType{"Error"} <- s_global,
		ClassType{"Error"} : ClassType(Error()),
		ClassType{"EventException"} <- s_global,
		ClassType{"EventException"} : ClassType(EventException()),
		ClassType{"Exception"} <- s_global,
		ClassType{"Exception"} : ClassType(Exception()),
		ClassType{"FileWriteMode"} <- s_global,
		ClassType{"FileWriteMode"} : ClassType(FileWriteMode()),
		ClassType{"FindType"} <- s_global,
		ClassType{"FindType"} : ClassType(FindType()),
		ClassType{"FormatException"} <- s_global,
		ClassType{"FormatException"} : ClassType(FormatException()),
		ClassType{"iclosure"} <- s_global,
		ClassType{"iclosure"} : ClassType(Iclosure()),
		ClassType{"IllegalArgumentException"} <- s_global,
		ClassType{"IllegalArgumentException"} : ClassType(IllegalArgumentException()),
		ClassType{"IncludeException"} <- s_global,
		ClassType{"IncludeException"} : ClassType(IncludeException()),
		ClassType{"IndexOverflowException"} <- s_global,
		ClassType{"IndexOverflowException"} : ClassType(IndexOverflowException()),
		ClassType{"InsufficientArgumentsException"} <- s_global,
		ClassType{"InsufficientArgumentsException"} : ClassType(InsufficientArgumentsException()),
		ClassType{"InsufficientPermissionException"} <- s_global,
		ClassType{"InsufficientPermissionException"} : ClassType(InsufficientPermissionException()),
		ClassType{"int"} <- s_global,
		ClassType{"int"} : ClassType(Int()),
		ClassType{"InvalidProcedureException"} <- s_global,
		ClassType{"InvalidProcedureException"} : ClassType(InvalidProcedureException()),
		ClassType{"IOException"} <- s_global,
		ClassType{"IOException"} : ClassType(IOException()),
		ClassType{"Iterable"} <- s_global,
		ClassType{"Iterable"} : ClassType(Iterable()),
		ClassType{"LengthException"} <- s_global,
		ClassType{"LengthException"} : ClassType(LengthException()),
		ClassType{"MathConstants"} <- s_global,
		ClassType{"MathConstants"} : ClassType(MathConstants()),
		ClassType{"Method"} <- s_global,
		ClassType{"Method"} : ClassType(Method()),
		ClassType{"mixed"} <- s_global,
		ClassType{"mixed"} : ClassType(Mixed()),
		ClassType{"mutable_primitive"} <- s_global,
		ClassType{"mutable_primitive"} : ClassType(Mutable_primitive()),
		ClassType{"NotFoundException"} <- s_global,
		ClassType{"NotFoundException"} : ClassType(NotFoundException()),
		ClassType{"NullPointerException"} <- s_global,
		ClassType{"NullPointerException"} : ClassType(NullPointerException()),
		ClassType{"number"} <- s_global,
		ClassType{"number"} : ClassType(Number()),
		ClassType{"ObjectModifier"} <- s_global,
		ClassType{"ObjectModifier"} : ClassType(ObjectModifier()),
		ClassType{"ObjectType"} <- s_global,
		ClassType{"ObjectType"} : ClassType(ObjectType()),
		ClassType{"Package"} <- s_global,
		ClassType{"Package"} : ClassType(Package()),
		ClassType{"PluginInternalException"} <- s_global,
		ClassType{"PluginInternalException"} : ClassType(PluginInternalException()),
		ClassType{"primitive"} <- s_global,
		ClassType{"primitive"} : ClassType(Primitive()),
		ClassType{"RangeException"} <- s_global,
		ClassType{"RangeException"} : ClassType(RangeException()),
		ClassType{"ReadOnlyException"} <- s_global,
		ClassType{"ReadOnlyException"} : ClassType(ReadOnlyException()),
		ClassType{"resource"} <- s_global,
		ClassType{"resource"} : ClassType(Resource()),
		ClassType{"secure_string"} <- s_global,
		ClassType{"secure_string"} : ClassType(Secure_string()),
		ClassType{"SecurityException"} <- s_global,
		ClassType{"SecurityException"} : ClassType(SecurityException()),
		ClassType{"ShellException"} <- s_global,
		ClassType{"ShellException"} : ClassType(ShellException()),
		ClassType{"Sizeable"} <- s_global,
		ClassType{"Sizeable"} : ClassType(Sizeable()),
		ClassType{"slice"} <- s_global,
		ClassType{"slice"} : ClassType(Slice()),
		ClassType{"SQLException"} <- s_global,
		ClassType{"SQLException"} : ClassType(SQLException()),
		ClassType{"StackOverflowError"} <- s_global,
		ClassType{"StackOverflowError"} : ClassType(StackOverflowError()),
		ClassType{"string"} <- s_global,
		ClassType{"string"} : ClassType(String()),
		ClassType{"Throwable"} <- s_global,
		ClassType{"Throwable"} : ClassType(Throwable()),
		ClassType{"UnsupportedOperationException"} <- s_global,
		ClassType{"UnsupportedOperationException"} : ClassType(UnsupportedOperationException()),
		ClassType{"UUIDType"} <- s_global,
		ClassType{"UUIDType"} : ClassType(UUIDType()),
		ClassType{"ValueType"} <- s_global,
		ClassType{"ValueType"} : ClassType(ValueType()).
