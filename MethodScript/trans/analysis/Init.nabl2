module analysis/Init

rules
	
	// Global initialization rule.
	init ^ (s_global) :=
		
		// Initialize global scope.
		new s_global,
		
		// Class type relations.
		// Child  <! Parent: "Child can be used as Parent".
		// This section is auto-generated and should only be changed through the generator.
		AccessModifier()                  <! Enum(),
		AccessModifier()                  <! Iterable(),
		Any()                             <! Null(),
		Array()                           <! Booleanish(),
		Array()                           <! Iterable(),
		Array()                           <! Mixed(),
		ArrayAccess()                     <! Mixed(),
		ArrayIntersectComparisonMode()    <! Enum(),
		ArrayIntersectComparisonMode()    <! Iterable(),
		ArraySortType()                   <! Enum(),
		ArraySortType()                   <! Iterable(),
		Art()                             <! Enum(),
		Art()                             <! Iterable(),
		BadEntityException()              <! Exception(),
		BadEntityTypeException()          <! Exception(),
		BarColor()                        <! Enum(),
		BarColor()                        <! Iterable(),
		BarStyle()                        <! Enum(),
		BarStyle()                        <! Iterable(),
		Barestring()                      <! String(),
		BindException()                   <! Exception(),
		BiomeType()                       <! Enum(),
		BiomeType()                       <! Iterable(),
		BlockFace()                       <! Enum(),
		BlockFace()                       <! Iterable(),
		Boolean()                         <! Primitive(),
		Booleanish()                      <! Mixed(),
		ByteArrayReadOnlyException()      <! ReadOnlyException(),
		ByteBackingArray()                <! Array(),
		Byte_array()                      <! Array(),
		Byte_array()                      <! ArrayAccess(),
		Byte_array()                      <! Sizeable(),
		CastException()                   <! Exception(),
		CatType()                         <! Enum(),
		CatType()                         <! Iterable(),
		ChatColor()                       <! Enum(),
		ChatColor()                       <! Iterable(),
		ClassDefinitionError()            <! Error(),
		ClassType()                       <! Iterable(),
		ClassType()                       <! Mixed(),
		ClickType()                       <! Enum(),
		ClickType()                       <! Iterable(),
		Closure()                         <! Mixed(),
		CollisionType()                   <! Enum(),
		CollisionType()                   <! Iterable(),
		CreeperType()                     <! Enum(),
		CreeperType()                     <! Iterable(),
		Criteria()                        <! Enum(),
		Criteria()                        <! Iterable(),
		Decimal()                         <! Primitive(),
		Difficulty()                      <! Enum(),
		Difficulty()                      <! Iterable(),
		DisplaySlot()                     <! Enum(),
		DisplaySlot()                     <! Iterable(),
		Double()                          <! Number(),
		DragType()                        <! Enum(),
		DragType()                        <! Iterable(),
		DyeColor()                        <! Enum(),
		DyeColor()                        <! Iterable(),
		Effect()                          <! Enum(),
		Effect()                          <! Iterable(),
		ElementModifier()                 <! Enum(),
		ElementModifier()                 <! Iterable(),
		EnchantmentException()            <! Exception(),
		EntityEffect()                    <! Enum(),
		EntityEffect()                    <! Iterable(),
		EntityType()                      <! Enum(),
		EntityType()                      <! Iterable(),
		Enum()                            <! Iterable(),
		Enum()                            <! Mixed(),
		EquipmentSlot()                   <! Enum(),
		EquipmentSlot()                   <! Iterable(),
		Error()                           <! Throwable(),
		EventException()                  <! Exception(),
		Exception()                       <! Throwable(),
		FileWriteMode()                   <! Enum(),
		FileWriteMode()                   <! Iterable(),
		FindType()                        <! Enum(),
		FindType()                        <! Iterable(),
		FireworkType()                    <! Enum(),
		FireworkType()                    <! Iterable(),
		FishingState()                    <! Enum(),
		FishingState()                    <! Iterable(),
		FormatException()                 <! Exception(),
		FoxType()                         <! Enum(),
		FoxType()                         <! Iterable(),
		GameMode()                        <! Enum(),
		GameMode()                        <! Iterable(),
		GameRule()                        <! Enum(),
		GameRule()                        <! Iterable(),
		HorseColor()                      <! Enum(),
		HorseColor()                      <! Iterable(),
		HorsePattern()                    <! Enum(),
		HorsePattern()                    <! Iterable(),
		IOException()                     <! Exception(),
		Iclosure()                        <! Closure(),
		IgniteCause()                     <! Enum(),
		IgniteCause()                     <! Iterable(),
		IllegalArgumentException()        <! Exception(),
		IncludeException()                <! Exception(),
		IndexOverflowException()          <! Exception(),
		Instrument()                      <! Enum(),
		Instrument()                      <! Iterable(),
		InsufficientArgumentsException()  <! Exception(),
		InsufficientPermissionException() <! Exception(),
		Int()                             <! Number(),
		InvalidPluginException()          <! Exception(),
		InvalidProcedureException()       <! Exception(),
		InvalidWorldException()           <! Exception(),
		InventoryAction()                 <! Enum(),
		InventoryAction()                 <! Iterable(),
		InventoryType()                   <! Enum(),
		InventoryType()                   <! Iterable(),
		ItemFlag()                        <! Enum(),
		ItemFlag()                        <! Iterable(),
		Iterable()                        <! ArrayAccess(),
		Iterable()                        <! Sizeable(),
		LengthException()                 <! Exception(),
		LlamaColor()                      <! Enum(),
		LlamaColor()                      <! Iterable(),
		MathConstants()                   <! Enum(),
		MathConstants()                   <! Iterable(),
		Method()                          <! Mixed(),
		Mobs()                            <! Enum(),
		Mobs()                            <! Iterable(),
		MushroomCowType()                 <! Enum(),
		MushroomCowType()                 <! Iterable(),
		Mutable_primitive()               <! Array(),
		Mutable_primitive()               <! Sizeable(),
		NotFoundException()               <! Exception(),
		Null()                            <! AccessModifier(),
		Null()                            <! Array(),
		Null()                            <! ArrayAccess(),
		Null()                            <! ArrayIntersectComparisonMode(),
		Null()                            <! ArraySortType(),
		Null()                            <! Art(),
		Null()                            <! BadEntityException(),
		Null()                            <! BadEntityTypeException(),
		Null()                            <! BarColor(),
		Null()                            <! BarStyle(),
		Null()                            <! Barestring(),
		Null()                            <! BindException(),
		Null()                            <! BiomeType(),
		Null()                            <! BlockFace(),
		Null()                            <! Boolean(),
		Null()                            <! Booleanish(),
		Null()                            <! ByteArrayReadOnlyException(),
		Null()                            <! ByteBackingArray(),
		Null()                            <! Byte_array(),
		Null()                            <! CastException(),
		Null()                            <! CatType(),
		Null()                            <! ChatColor(),
		Null()                            <! ClassDefinitionError(),
		Null()                            <! ClassType(),
		Null()                            <! ClickType(),
		Null()                            <! Closure(),
		Null()                            <! CollisionType(),
		Null()                            <! CreeperType(),
		Null()                            <! Criteria(),
		Null()                            <! Decimal(),
		Null()                            <! Difficulty(),
		Null()                            <! DisplaySlot(),
		Null()                            <! Double(),
		Null()                            <! DragType(),
		Null()                            <! DyeColor(),
		Null()                            <! Effect(),
		Null()                            <! ElementModifier(),
		Null()                            <! EnchantmentException(),
		Null()                            <! EntityEffect(),
		Null()                            <! EntityType(),
		Null()                            <! Enum(),
		Null()                            <! EquipmentSlot(),
		Null()                            <! Error(),
		Null()                            <! EventException(),
		Null()                            <! Exception(),
		Null()                            <! FileWriteMode(),
		Null()                            <! FindType(),
		Null()                            <! FireworkType(),
		Null()                            <! FishingState(),
		Null()                            <! FormatException(),
		Null()                            <! FoxType(),
		Null()                            <! GameMode(),
		Null()                            <! GameRule(),
		Null()                            <! HorseColor(),
		Null()                            <! HorsePattern(),
		Null()                            <! IOException(),
		Null()                            <! Iclosure(),
		Null()                            <! IgniteCause(),
		Null()                            <! IllegalArgumentException(),
		Null()                            <! IncludeException(),
		Null()                            <! IndexOverflowException(),
		Null()                            <! Instrument(),
		Null()                            <! InsufficientArgumentsException(),
		Null()                            <! InsufficientPermissionException(),
		Null()                            <! Int(),
		Null()                            <! InvalidPluginException(),
		Null()                            <! InvalidProcedureException(),
		Null()                            <! InvalidWorldException(),
		Null()                            <! InventoryAction(),
		Null()                            <! InventoryType(),
		Null()                            <! ItemFlag(),
		Null()                            <! Iterable(),
		Null()                            <! LengthException(),
		Null()                            <! LlamaColor(),
		Null()                            <! MathConstants(),
		Null()                            <! Method(),
		Null()                            <! Mixed(),
		Null()                            <! Mobs(),
		Null()                            <! MushroomCowType(),
		Null()                            <! Mutable_primitive(),
		Null()                            <! NotFoundException(),
		Null()                            <! NullPointerException(),
		Null()                            <! Number(),
		Null()                            <! OAuthException(),
		Null()                            <! ObjectModifier(),
		Null()                            <! ObjectType(),
		Null()                            <! OcelotType(),
		Null()                            <! Option(),
		Null()                            <! OptionStatus(),
		Null()                            <! Package(),
		Null()                            <! ParrotType(),
		Null()                            <! Particle(),
		Null()                            <! PatternShape(),
		Null()                            <! PigType(),
		Null()                            <! PlayerOfflineException(),
		Null()                            <! PluginChannelException(),
		Null()                            <! PluginInternalException(),
		Null()                            <! PotionEffectType(),
		Null()                            <! PotionType(),
		Null()                            <! Primitive(),
		Null()                            <! Profession(),
		Null()                            <! RabbitType(),
		Null()                            <! RangeException(),
		Null()                            <! ReadOnlyException(),
		Null()                            <! RemoveCause(),
		Null()                            <! Resource(),
		Null()                            <! Rotation(),
		Null()                            <! SQLException(),
		Null()                            <! ScoreboardException(),
		Null()                            <! Secure_string(),
		Null()                            <! SecurityException(),
		Null()                            <! ShellException(),
		Null()                            <! Sizeable(),
		Null()                            <! Slice(),
		Null()                            <! SlotType(),
		Null()                            <! Sound(),
		Null()                            <! SoundCategory(),
		Null()                            <! SpawnReason(),
		Null()                            <! StackOverflowError(),
		Null()                            <! String(),
		Null()                            <! TeleportCause(),
		Null()                            <! Throwable(),
		Null()                            <! Tone(),
		Null()                            <! TreeType(),
		Null()                            <! TropicalFishPattern(),
		Null()                            <! UUIDType(),
		Null()                            <! UnageableMobException(),
		Null()                            <! UnsupportedOperationException(),
		Null()                            <! UntameableMobException(),
		Null()                            <! ValueType(),
		Null()                            <! WolfType(),
		Null()                            <! WoodType(),
		Null()                            <! WorldEnvironment(),
		Null()                            <! WorldType(),
		Null()                            <! ZombieType(),
		NullPointerException()            <! Exception(),
		Number()                          <! Primitive(),
		OAuthException()                  <! Exception(),
		ObjectModifier()                  <! Enum(),
		ObjectModifier()                  <! Iterable(),
		ObjectType()                      <! Enum(),
		ObjectType()                      <! Iterable(),
		OcelotType()                      <! Enum(),
		OcelotType()                      <! Iterable(),
		Option()                          <! Enum(),
		Option()                          <! Iterable(),
		OptionStatus()                    <! Enum(),
		OptionStatus()                    <! Iterable(),
		ParrotType()                      <! Enum(),
		ParrotType()                      <! Iterable(),
		Particle()                        <! Enum(),
		Particle()                        <! Iterable(),
		PatternShape()                    <! Enum(),
		PatternShape()                    <! Iterable(),
		PigType()                         <! Enum(),
		PigType()                         <! Iterable(),
		PlayerOfflineException()          <! Exception(),
		PluginChannelException()          <! Exception(),
		PluginInternalException()         <! Exception(),
		PotionEffectType()                <! Enum(),
		PotionEffectType()                <! Iterable(),
		PotionType()                      <! Enum(),
		PotionType()                      <! Iterable(),
		Primitive()                       <! Booleanish(),
		Primitive()                       <! Mixed(),
		Primitive()                       <! ValueType(),
		Profession()                      <! Enum(),
		Profession()                      <! Iterable(),
		RabbitType()                      <! Enum(),
		RabbitType()                      <! Iterable(),
		RangeException()                  <! Exception(),
		ReadOnlyException()               <! Exception(),
		RemoveCause()                     <! Enum(),
		RemoveCause()                     <! Iterable(),
		Resource()                        <! Mixed(),
		Rotation()                        <! Enum(),
		Rotation()                        <! Iterable(),
		SQLException()                    <! Exception(),
		ScoreboardException()             <! Exception(),
		Secure_string()                   <! String(),
		SecurityException()               <! Exception(),
		ShellException()                  <! Exception(),
		Sizeable()                        <! Mixed(),
		Slice()                           <! Array(),
		SlotType()                        <! Enum(),
		SlotType()                        <! Iterable(),
		Sound()                           <! Enum(),
		Sound()                           <! Iterable(),
		SoundCategory()                   <! Enum(),
		SoundCategory()                   <! Iterable(),
		SpawnReason()                     <! Enum(),
		SpawnReason()                     <! Iterable(),
		StackOverflowError()              <! Error(),
		String()                          <! Iterable(),
		String()                          <! Primitive(),
		TeleportCause()                   <! Enum(),
		TeleportCause()                   <! Iterable(),
		Throwable()                       <! ArrayAccess(),
		Throwable()                       <! Mixed(),
		Tone()                            <! Enum(),
		Tone()                            <! Iterable(),
		TreeType()                        <! Enum(),
		TreeType()                        <! Iterable(),
		TropicalFishPattern()             <! Enum(),
		TropicalFishPattern()             <! Iterable(),
		UUIDType()                        <! Enum(),
		UUIDType()                        <! Iterable(),
		UnageableMobException()           <! Exception(),
		UnsupportedOperationException()   <! Exception(),
		UntameableMobException()          <! Exception(),
		ValueType()                       <! Mixed(),
		WolfType()                        <! Enum(),
		WolfType()                        <! Iterable(),
		WoodType()                        <! Enum(),
		WoodType()                        <! Iterable(),
		WorldEnvironment()                <! Enum(),
		WorldEnvironment()                <! Iterable(),
		WorldType()                       <! Enum(),
		WorldType()                       <! Iterable(),
		ZombieType()                      <! Enum(),
		ZombieType()                      <! Iterable(),
		
		// Class type declarations.
		// This section is auto-generated and should only be changed through the generator.
		ClassType{"Art"} <- s_global,
		ClassType{"Art"} : ClassType(Art()),
		ClassType{"BadEntityException"} <- s_global,
		ClassType{"BadEntityException"} : ClassType(BadEntityException()),
		ClassType{"BadEntityTypeException"} <- s_global,
		ClassType{"BadEntityTypeException"} : ClassType(BadEntityTypeException()),
		ClassType{"BarColor"} <- s_global,
		ClassType{"BarColor"} : ClassType(BarColor()),
		ClassType{"BarStyle"} <- s_global,
		ClassType{"BarStyle"} : ClassType(BarStyle()),
		ClassType{"BiomeType"} <- s_global,
		ClassType{"BiomeType"} : ClassType(BiomeType()),
		ClassType{"BlockFace"} <- s_global,
		ClassType{"BlockFace"} : ClassType(BlockFace()),
		ClassType{"CatType"} <- s_global,
		ClassType{"CatType"} : ClassType(CatType()),
		ClassType{"ChatColor"} <- s_global,
		ClassType{"ChatColor"} : ClassType(ChatColor()),
		ClassType{"ClickType"} <- s_global,
		ClassType{"ClickType"} : ClassType(ClickType()),
		ClassType{"CollisionType"} <- s_global,
		ClassType{"CollisionType"} : ClassType(CollisionType()),
		ClassType{"CreeperType"} <- s_global,
		ClassType{"CreeperType"} : ClassType(CreeperType()),
		ClassType{"Criteria"} <- s_global,
		ClassType{"Criteria"} : ClassType(Criteria()),
		ClassType{"Difficulty"} <- s_global,
		ClassType{"Difficulty"} : ClassType(Difficulty()),
		ClassType{"DisplaySlot"} <- s_global,
		ClassType{"DisplaySlot"} : ClassType(DisplaySlot()),
		ClassType{"DragType"} <- s_global,
		ClassType{"DragType"} : ClassType(DragType()),
		ClassType{"DyeColor"} <- s_global,
		ClassType{"DyeColor"} : ClassType(DyeColor()),
		ClassType{"Effect"} <- s_global,
		ClassType{"Effect"} : ClassType(Effect()),
		ClassType{"EnchantmentException"} <- s_global,
		ClassType{"EnchantmentException"} : ClassType(EnchantmentException()),
		ClassType{"EntityEffect"} <- s_global,
		ClassType{"EntityEffect"} : ClassType(EntityEffect()),
		ClassType{"EntityType"} <- s_global,
		ClassType{"EntityType"} : ClassType(EntityType()),
		ClassType{"EquipmentSlot"} <- s_global,
		ClassType{"EquipmentSlot"} : ClassType(EquipmentSlot()),
		ClassType{"FireworkType"} <- s_global,
		ClassType{"FireworkType"} : ClassType(FireworkType()),
		ClassType{"FishingState"} <- s_global,
		ClassType{"FishingState"} : ClassType(FishingState()),
		ClassType{"FoxType"} <- s_global,
		ClassType{"FoxType"} : ClassType(FoxType()),
		ClassType{"GameMode"} <- s_global,
		ClassType{"GameMode"} : ClassType(GameMode()),
		ClassType{"GameRule"} <- s_global,
		ClassType{"GameRule"} : ClassType(GameRule()),
		ClassType{"HorseColor"} <- s_global,
		ClassType{"HorseColor"} : ClassType(HorseColor()),
		ClassType{"HorsePattern"} <- s_global,
		ClassType{"HorsePattern"} : ClassType(HorsePattern()),
		ClassType{"IgniteCause"} <- s_global,
		ClassType{"IgniteCause"} : ClassType(IgniteCause()),
		ClassType{"Instrument"} <- s_global,
		ClassType{"Instrument"} : ClassType(Instrument()),
		ClassType{"InvalidPluginException"} <- s_global,
		ClassType{"InvalidPluginException"} : ClassType(InvalidPluginException()),
		ClassType{"InvalidWorldException"} <- s_global,
		ClassType{"InvalidWorldException"} : ClassType(InvalidWorldException()),
		ClassType{"InventoryAction"} <- s_global,
		ClassType{"InventoryAction"} : ClassType(InventoryAction()),
		ClassType{"InventoryType"} <- s_global,
		ClassType{"InventoryType"} : ClassType(InventoryType()),
		ClassType{"ItemFlag"} <- s_global,
		ClassType{"ItemFlag"} : ClassType(ItemFlag()),
		ClassType{"LlamaColor"} <- s_global,
		ClassType{"LlamaColor"} : ClassType(LlamaColor()),
		ClassType{"Mobs"} <- s_global,
		ClassType{"Mobs"} : ClassType(Mobs()),
		ClassType{"MushroomCowType"} <- s_global,
		ClassType{"MushroomCowType"} : ClassType(MushroomCowType()),
		ClassType{"OcelotType"} <- s_global,
		ClassType{"OcelotType"} : ClassType(OcelotType()),
		ClassType{"Option"} <- s_global,
		ClassType{"Option"} : ClassType(Option()),
		ClassType{"OptionStatus"} <- s_global,
		ClassType{"OptionStatus"} : ClassType(OptionStatus()),
		ClassType{"ParrotType"} <- s_global,
		ClassType{"ParrotType"} : ClassType(ParrotType()),
		ClassType{"Particle"} <- s_global,
		ClassType{"Particle"} : ClassType(Particle()),
		ClassType{"PatternShape"} <- s_global,
		ClassType{"PatternShape"} : ClassType(PatternShape()),
		ClassType{"PigType"} <- s_global,
		ClassType{"PigType"} : ClassType(PigType()),
		ClassType{"PlayerOfflineException"} <- s_global,
		ClassType{"PlayerOfflineException"} : ClassType(PlayerOfflineException()),
		ClassType{"PluginChannelException"} <- s_global,
		ClassType{"PluginChannelException"} : ClassType(PluginChannelException()),
		ClassType{"PotionEffectType"} <- s_global,
		ClassType{"PotionEffectType"} : ClassType(PotionEffectType()),
		ClassType{"PotionType"} <- s_global,
		ClassType{"PotionType"} : ClassType(PotionType()),
		ClassType{"Profession"} <- s_global,
		ClassType{"Profession"} : ClassType(Profession()),
		ClassType{"RabbitType"} <- s_global,
		ClassType{"RabbitType"} : ClassType(RabbitType()),
		ClassType{"RemoveCause"} <- s_global,
		ClassType{"RemoveCause"} : ClassType(RemoveCause()),
		ClassType{"Rotation"} <- s_global,
		ClassType{"Rotation"} : ClassType(Rotation()),
		ClassType{"ScoreboardException"} <- s_global,
		ClassType{"ScoreboardException"} : ClassType(ScoreboardException()),
		ClassType{"SlotType"} <- s_global,
		ClassType{"SlotType"} : ClassType(SlotType()),
		ClassType{"Sound"} <- s_global,
		ClassType{"Sound"} : ClassType(Sound()),
		ClassType{"SoundCategory"} <- s_global,
		ClassType{"SoundCategory"} : ClassType(SoundCategory()),
		ClassType{"SpawnReason"} <- s_global,
		ClassType{"SpawnReason"} : ClassType(SpawnReason()),
		ClassType{"TeleportCause"} <- s_global,
		ClassType{"TeleportCause"} : ClassType(TeleportCause()),
		ClassType{"Tone"} <- s_global,
		ClassType{"Tone"} : ClassType(Tone()),
		ClassType{"TreeType"} <- s_global,
		ClassType{"TreeType"} : ClassType(TreeType()),
		ClassType{"TropicalFishPattern"} <- s_global,
		ClassType{"TropicalFishPattern"} : ClassType(TropicalFishPattern()),
		ClassType{"UnageableMobException"} <- s_global,
		ClassType{"UnageableMobException"} : ClassType(UnageableMobException()),
		ClassType{"UntameableMobException"} <- s_global,
		ClassType{"UntameableMobException"} : ClassType(UntameableMobException()),
		ClassType{"WolfType"} <- s_global,
		ClassType{"WolfType"} : ClassType(WolfType()),
		ClassType{"WoodType"} <- s_global,
		ClassType{"WoodType"} : ClassType(WoodType()),
		ClassType{"WorldEnvironment"} <- s_global,
		ClassType{"WorldEnvironment"} : ClassType(WorldEnvironment()),
		ClassType{"WorldType"} <- s_global,
		ClassType{"WorldType"} : ClassType(WorldType()),
		ClassType{"ZombieType"} <- s_global,
		ClassType{"ZombieType"} : ClassType(ZombieType()),
		ClassType{"AccessModifier"} <- s_global,
		ClassType{"AccessModifier"} : ClassType(AccessModifier()),
		ClassType{"array"} <- s_global,
		ClassType{"array"} : ClassType(Array()),
		ClassType{"ArrayAccess"} <- s_global,
		ClassType{"ArrayAccess"} : ClassType(ArrayAccess()),
		ClassType{"ArrayIntersectComparisonMode"} <- s_global,
		ClassType{"ArrayIntersectComparisonMode"} : ClassType(ArrayIntersectComparisonMode()),
		ClassType{"ArraySortType"} <- s_global,
		ClassType{"ArraySortType"} : ClassType(ArraySortType()),
		ClassType{"OAuthException"} <- s_global,
		ClassType{"OAuthException"} : ClassType(OAuthException()),
		ClassType{"barestring"} <- s_global,
		ClassType{"barestring"} : ClassType(Barestring()),
		ClassType{"BindException"} <- s_global,
		ClassType{"BindException"} : ClassType(BindException()),
		ClassType{"boolean"} <- s_global,
		ClassType{"boolean"} : ClassType(Boolean()),
		ClassType{"Booleanish"} <- s_global,
		ClassType{"Booleanish"} : ClassType(Booleanish()),
		ClassType{"byte_array"} <- s_global,
		ClassType{"byte_array"} : ClassType(Byte_array()),
		ClassType{"ByteArrayReadOnlyException"} <- s_global,
		ClassType{"ByteArrayReadOnlyException"} : ClassType(ByteArrayReadOnlyException()),
		ClassType{"ByteBackingArray"} <- s_global,
		ClassType{"ByteBackingArray"} : ClassType(ByteBackingArray()),
		ClassType{"CastException"} <- s_global,
		ClassType{"CastException"} : ClassType(CastException()),
		ClassType{"ClassDefinitionError"} <- s_global,
		ClassType{"ClassDefinitionError"} : ClassType(ClassDefinitionError()),
		ClassType{"ClassType"} <- s_global,
		ClassType{"ClassType"} : ClassType(ClassType()),
		ClassType{"closure"} <- s_global,
		ClassType{"closure"} : ClassType(Closure()),
		ClassType{"decimal"} <- s_global,
		ClassType{"decimal"} : ClassType(Decimal()),
		ClassType{"double"} <- s_global,
		ClassType{"double"} : ClassType(Double()),
		ClassType{"ElementModifier"} <- s_global,
		ClassType{"ElementModifier"} : ClassType(ElementModifier()),
		ClassType{"enum"} <- s_global,
		ClassType{"enum"} : ClassType(Enum()),
		ClassType{"Error"} <- s_global,
		ClassType{"Error"} : ClassType(Error()),
		ClassType{"EventException"} <- s_global,
		ClassType{"EventException"} : ClassType(EventException()),
		ClassType{"Exception"} <- s_global,
		ClassType{"Exception"} : ClassType(Exception()),
		ClassType{"FileWriteMode"} <- s_global,
		ClassType{"FileWriteMode"} : ClassType(FileWriteMode()),
		ClassType{"FindType"} <- s_global,
		ClassType{"FindType"} : ClassType(FindType()),
		ClassType{"FormatException"} <- s_global,
		ClassType{"FormatException"} : ClassType(FormatException()),
		ClassType{"iclosure"} <- s_global,
		ClassType{"iclosure"} : ClassType(Iclosure()),
		ClassType{"IllegalArgumentException"} <- s_global,
		ClassType{"IllegalArgumentException"} : ClassType(IllegalArgumentException()),
		ClassType{"IncludeException"} <- s_global,
		ClassType{"IncludeException"} : ClassType(IncludeException()),
		ClassType{"IndexOverflowException"} <- s_global,
		ClassType{"IndexOverflowException"} : ClassType(IndexOverflowException()),
		ClassType{"InsufficientArgumentsException"} <- s_global,
		ClassType{"InsufficientArgumentsException"} : ClassType(InsufficientArgumentsException()),
		ClassType{"InsufficientPermissionException"} <- s_global,
		ClassType{"InsufficientPermissionException"} : ClassType(InsufficientPermissionException()),
		ClassType{"int"} <- s_global,
		ClassType{"int"} : ClassType(Int()),
		ClassType{"InvalidProcedureException"} <- s_global,
		ClassType{"InvalidProcedureException"} : ClassType(InvalidProcedureException()),
		ClassType{"IOException"} <- s_global,
		ClassType{"IOException"} : ClassType(IOException()),
		ClassType{"Iterable"} <- s_global,
		ClassType{"Iterable"} : ClassType(Iterable()),
		ClassType{"LengthException"} <- s_global,
		ClassType{"LengthException"} : ClassType(LengthException()),
		ClassType{"MathConstants"} <- s_global,
		ClassType{"MathConstants"} : ClassType(MathConstants()),
		ClassType{"Method"} <- s_global,
		ClassType{"Method"} : ClassType(Method()),
		ClassType{"mixed"} <- s_global,
		ClassType{"mixed"} : ClassType(Mixed()),
		ClassType{"mutable_primitive"} <- s_global,
		ClassType{"mutable_primitive"} : ClassType(Mutable_primitive()),
		ClassType{"NotFoundException"} <- s_global,
		ClassType{"NotFoundException"} : ClassType(NotFoundException()),
		ClassType{"NullPointerException"} <- s_global,
		ClassType{"NullPointerException"} : ClassType(NullPointerException()),
		ClassType{"number"} <- s_global,
		ClassType{"number"} : ClassType(Number()),
		ClassType{"ObjectModifier"} <- s_global,
		ClassType{"ObjectModifier"} : ClassType(ObjectModifier()),
		ClassType{"ObjectType"} <- s_global,
		ClassType{"ObjectType"} : ClassType(ObjectType()),
		ClassType{"Package"} <- s_global,
		ClassType{"Package"} : ClassType(Package()),
		ClassType{"PluginInternalException"} <- s_global,
		ClassType{"PluginInternalException"} : ClassType(PluginInternalException()),
		ClassType{"primitive"} <- s_global,
		ClassType{"primitive"} : ClassType(Primitive()),
		ClassType{"RangeException"} <- s_global,
		ClassType{"RangeException"} : ClassType(RangeException()),
		ClassType{"ReadOnlyException"} <- s_global,
		ClassType{"ReadOnlyException"} : ClassType(ReadOnlyException()),
		ClassType{"resource"} <- s_global,
		ClassType{"resource"} : ClassType(Resource()),
		ClassType{"secure_string"} <- s_global,
		ClassType{"secure_string"} : ClassType(Secure_string()),
		ClassType{"SecurityException"} <- s_global,
		ClassType{"SecurityException"} : ClassType(SecurityException()),
		ClassType{"ShellException"} <- s_global,
		ClassType{"ShellException"} : ClassType(ShellException()),
		ClassType{"Sizeable"} <- s_global,
		ClassType{"Sizeable"} : ClassType(Sizeable()),
		ClassType{"slice"} <- s_global,
		ClassType{"slice"} : ClassType(Slice()),
		ClassType{"SQLException"} <- s_global,
		ClassType{"SQLException"} : ClassType(SQLException()),
		ClassType{"StackOverflowError"} <- s_global,
		ClassType{"StackOverflowError"} : ClassType(StackOverflowError()),
		ClassType{"string"} <- s_global,
		ClassType{"string"} : ClassType(String()),
		ClassType{"Throwable"} <- s_global,
		ClassType{"Throwable"} : ClassType(Throwable()),
		ClassType{"UnsupportedOperationException"} <- s_global,
		ClassType{"UnsupportedOperationException"} : ClassType(UnsupportedOperationException()),
		ClassType{"UUIDType"} <- s_global,
		ClassType{"UUIDType"} : ClassType(UUIDType()),
		ClassType{"ValueType"} <- s_global,
		ClassType{"ValueType"} : ClassType(ValueType()).
