module Math

imports
	Common
	MethodScript

context-free syntax
	
	// Statements.
	// None.
	
	// Expressions.
	Exp.Add      = <<Exp> + <Exp>> {left}
	Exp.Subtract = <<Exp> - <Exp>> {left}
	Exp.Multiply = <<Exp> * <Exp>> {left}
	Exp.Divide   = <<Exp> / <Exp>> {left}
	Exp.Mod      = <<Exp> % <Exp>> {left}
	Exp.Pow      = <<Exp> ** <Exp>> {left}
	Exp.Neg      = <-<Exp>> {avoid} // Avoid to prevent matching signed numbers.
	
	// Pos isn't an actual function in MethodScript, but the syntax is allowed.
	Exp.Pos      = <+<Exp>> {avoid} // Avoid to prevent matching signed numbers.
	
	Exp.AddLegacy      = <add(<Exp>, <Exp>)>
	Exp.SubtractLegacy = <subtract(<Exp>, <Exp>)>
	Exp.MultiplyLegacy = <multiply(<Exp>, <Exp>)>
	Exp.DivideLegacy   = <divide(<Exp>, <Exp>)>
	Exp.ModLegacy      = <mod(<Exp>, <Exp>)>
	Exp.PowLegacy      = <pow(<Exp>, <Exp>)>
	Exp.NegLegacy      = <neg(<Exp>)>
	
	// Statement expressions.
	// Avoid inc/postinc/postdec to apply the inc/postinc/postdec on the smallest term (and not over assigns etc).
	Statement.Inc = <++<Exp>> // Expression desugared from Pos(Pos(exp)).
	SExp.PostInc  = <<Exp>++> {avoid}
	Statement.Dec = <--<Exp>> // Expression desugared from Neg(Neg(exp)).
	SExp.PostDec  = <<Exp>--> {avoid}
	
	SExp.IncLegacy     = <inc(<Exp>)>
	SExp.PostIncLegacy = <postinc(<Exp>)>
	SExp.DecLegacy     = <dec(<Exp>)>
	SExp.PostDecLegacy = <postdec(<Exp>)>
