module MethodScript

imports
	Common
	ArrayHandling
	BasicLogic
	ControlFlow
	DataHandling
	EventBinding
	Exceptions
	Math
	StringHandling

context-free start-symbols
	Start Statement Exp

context-free syntax
	Start.Empty = <>
//	Start.Msa = <> // TODO - Implement.
	Start.Ms = Statement+
//	Start.AutoIncludeMs = <> // TODO - Implement.
	
	/*
	 * Statement: Single coherent code that does not result in a value. Cannot be used as Exp.
	 * SExp: Statement that resolves to some value. Can be used as Statement and as Exp.
	 * Exp: Expression that resolves to some value. Cannot be used as Statement.
	 */
	Statement.SExp = <<SExp><SemiColon?>
	>
	Exp.SExp = SExp
	SemiColon.SemiColon = ";"
	
	// Statements.
	Statement.Block = <(
		<Statement*>
	)>
	
	// Expressions.
	
	// Variables.
	Exp.IVar = IVAR
	Exp.Var = VAR
	
	// Parameters that use a single scope for declaring and resolving.
	IVarParam.IVarParam = IVAR
	IVarParam.IVarAssignParam = <<IVAR> = <Exp>>
	
	// Parameters that use a different scope for declaring and resolving.
	IVarScopeParam.IVarScopeParam = IVAR
	IVarScopeParam.IVarAssignScopeParam = <<IVAR> = <Exp>>
	
	// Static values.
	Exp.IntVal = INT
	Exp.DoubleVal = DOUBLE
	Exp.StringVal = STRING
	Exp.SmartStringVal = SMART-STRING
	Exp.True = "true"
	Exp.False = "false"
	Exp.Null = "null"
	
	// Function calls. Functions that accept code blocks as an argument should be defined separately.
	SExp.FuncCall = <<FUNC-ID>(<{Exp ","}*>)>
	
	// Brackets. These are allowed around statements and expressions.
	Exp = <(<Exp>)> {bracket}

context-free priorities
	// Operator priorities (tested): {array_clone, array_get} > {neg, not} > {**} > {*, /, %} > {+, -, .}
	// > {>, <, >=, <=} > {==, !=, ===, !==} > {&&&} > {|||} > {&&} > {||} > {assign, array_set}.
	// Unary operator priorities (tested): {neg} > {postinc, postdec} > {inc, dec} > {not}.
	{Exp.ArrayClone Exp.ArrayGet}
			> {Exp.Neg Exp.Not}
			> Exp.Pow
			> {left: Exp.Multiply Exp.Divide Exp.Mod}
			> {left: Exp.Add Exp.Subtract Exp.Concat}
			> {non-assoc: Exp.Gt Exp.Lt Exp.Gte Exp.Lte}
			> {Exp.Equals Exp.NotEquals Exp.Sequals Exp.NotSequals}
			> Exp.Dand > Exp.Dor > Exp.And > Exp.Or
			> {SExp.IVarAssign SExp.ArraySet SExp.IVarAddAssign SExp.IVarSubtractAssign
					SExp.IVarMultiplyAssign SExp.IVarDivideAssign SExp.IVarConcatAssign}
