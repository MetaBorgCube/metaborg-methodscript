module ControlFlow

imports
	Common
	MethodScript

context-free syntax
	
	// Statements.
	// 'if' syntax collides with 'ifelse' syntax.
//	Statement.If = <if(<Exp>) {
//		<Statement*>
//	}<IfElseBlock?>>
	
	Statement.IfLegacy = <if(<Exp>,
		<Statement+><IfElseBlockLegacy?>
	)<SemiColon?>>
	
	Statement.IfElse = <if(<Exp>) {
		<Statement*>
	}<IfElseIfBlock*><IfElseBlock?>>
	IfElseIfBlock.IfElseIfBlock = < else if(<Exp>) {
		<Statement*>
	}>
	IfElseBlock.IfElseBlock = < else {
		<Statement*>
	}>
	
	Statement.IfElseLegacy = <ifelse(<Exp>,
		<Statement+><IfElseIfBlockLegacy*><IfElseBlockLegacy?>
	)<SemiColon?>>
	IfElseIfBlockLegacy.IfElseIfBlockLegacy = <
	, <Exp>,
		<Statement+>>
	IfElseBlockLegacy.IfElseBlockLegacy = <
	,
		<Statement+>>
	
	Statement.While = <while(<Exp>) {
		<Statement*>
	}>
	
	Statement.WhileLegacy = <while(<Exp>,
		<Statement+>
	)<SemiColon?>>
	
	Statement.DoWhile = <do {
		<Statement*>
	while(<Exp>)<SemiColon?>>
	
	Statement.DoWhileLegacy = <dowhile(
		<Statement+>
	, <Exp>)<SemiColon?>>
	
	Statement.For = <for(<IVarParam>, <Exp>, <Exp>) {
		<Statement*>
	}>
	
	Statement.ForLegacy = <for(<IVarParam>, <Exp>, <Exp>,
		<Statement+>
	)<SemiColon?>>
	
	Statement.ForElse = <for(<IVarParam>, <Exp>, <Exp>) {
		<Statement*>
	} else {
		<Statement*>
	}>
	
	Statement.ForElseLegacy = <forelse(<IVarParam>, <Exp>, <Exp>,
		<Statement+>
	,
		<Statement+>
	)<SemiColon?>>
	
	// "foreach(@value in @array) {code}".
	Statement.ForEach1 = <foreach(<IVarParam> in <Exp>) {
		<Statement*>
	}>
	
	// "foreach(@array as @value) {code}".
	Statement.ForEach2 = <foreach(<Exp> as <IVarParam>) {
		<Statement*>
	}>
	
	// "foreach(@array, @value) {code}".
	Statement.ForEach3 = <foreach(<Exp>, <IVarParam>) {
		<Statement*>
	}>
	
	// "foreach(@key: @value in @array) {code}".
	Statement.ForEach4 = <foreach(<IVarParam>: <IVarParam> in <Exp>) {
		<Statement*>
	}>
	
	// "foreach(@array, @key, @value) {code}".
	Statement.ForEach5 = <foreach(<Exp>, <IVarParam>, <IVarParam>) {
		<Statement*>
	}>
	
	Statement.ForEachLegacy1 = <foreach(<Exp>, <IVarParam>,
		<Statement+>
	)<SemiColon?>>
	
	Statement.ForEachLegacy2 = <foreach(<Exp>, <IVarParam>, <IVarParam>,
		<Statement+>
	)<SemiColon?>>
	
	// "foreach(@value in @array) {code} else {code}".
	Statement.ForEachElse1 = <foreach(<IVarParam> in <Exp>) {
		<Statement*>
	} else {
		<Statement*>
	}>
	
	// "foreach(@array as @value) {code} else {code}".
	Statement.ForEachElse2 = <foreach(<Exp> as <IVarParam>) {
		<Statement*>
	} else {
		<Statement*>
	}>
	
	// "foreach(@array, @value) {code} else {code}".
	Statement.ForEachElse3 = <foreach(<Exp>, <IVarParam>) {
		<Statement*>
	} else {
		<Statement*>
	}>
	
	// "foreach(@key: @value in @array) {code} else {code}".
	Statement.ForEachElse4 = <foreach(<IVarParam>: <IVarParam> in <Exp>) {
		<Statement*>
	} else {
		<Statement*>
	}>
	
	// "foreach(@array, @key, @value) {code} else {code}".
	Statement.ForEachElse5 = <foreach(<Exp>, <IVarParam>, <IVarParam>) {
		<Statement*>
	} else {
		<Statement*>
	}>
	
	Statement.ForEachElseLegacy1 = <foreachelse(<Exp>, <IVarParam>,
		<Statement+>
	,
		<Statement+>
	)<SemiColon?>>
	
	Statement.ForEachElseLegacy2 = <foreachelse(<Exp>, <IVarParam>, <IVarParam>,
		<Statement+>
	,
		<Statement+>
	)<SemiColon?>>
	
	Statement.Switch = <switch(<Exp>) {
		<SwitchCase*><SwitchDefault?>
	}>
	SwitchCase.SwitchCase = <
		<SwitchLabel+>
			<Statement+>
	>
	SwitchDefault.SwitchDefault = <
		default:
			<Statement+>
	>
	SwitchLabel.SwitchLabel = <case <Exp>:
	>
	
	Statement.SwitchLegacy = <switch(<Exp><SwitchCaseLegacy*><SwitchDefaultLegacy?>
	)>
	SwitchCaseLegacy.SwitchCaseLegacy = <,
		<SwitchLabelLegacy>,
			<Statement+>
		>
	SwitchDefaultLegacy.SwitchDefaultLegacy = <,
			<Statement+>
		>
	
	SwitchLabelLegacy.SwitchLabelLegacy = Exp
//	SwitchLabelLegacy.SwitchLabelArrayLegacy = <array(<{Exp ","}+>)>
	
	Statement.Break = <break(<Exp?>)<SemiColon?>> // break([numLoops]).
	Statement.Continue = <continue(<Exp?>)<SemiColon?>> // continue([numLoopsSkipped]).
	Statement.Return = <return(<Exp?>)<SemiColon?>> // return([value]).
	Statement.Die = <die(<Exp?>)<SemiColon?>> // die([message]).
	
	// Expressions.
	Exp.Ternary = <if(<Exp>) {<Exp>} else {<Exp>}> // "@val = if(cond) {exp1} else {exp2}".
	Exp.TernaryLegacy = <if(<Exp>, <Exp>, <Exp>)> // "@val = if(cond, exp1, exp2}".
	
	Exp.SwitchExp = <switch(<Exp>) {
		<SwitchExpCase*><SwitchExpDefault?>
	}>
	SwitchExpCase.SwitchExpCase = <
		<SwitchLabel+>
			<Exp>
	>
	SwitchExpDefault.SwitchExpDefault = <
		default:
			<Exp>
	>
	
	Exp.SwitchExpLegacy = <switch(<Exp><SwitchExpCaseLegacy*><SwitchExpDefaultLegacy?>
	)>
	SwitchExpCaseLegacy.SwitchExpCaseLegacy = <,
		<SwitchLabelLegacy>,
			<Exp>>
	SwitchExpDefaultLegacy.SwitchExpDefaultLegacy = <,
			<Exp>
		>
	
	// Statement expressions.
	SExp.ProcCall = <<PROC-ID>(<{Exp ","}*>)>
	SExp.ProcCallDynamic = <call_proc(<Exp><ProcCallArg*>)>
	SExp.ProcCallDynamicArray = <call_proc_array(<Exp>, <Exp>)>
	ProcCallArg.ProcCallArg = <, <Exp>>
