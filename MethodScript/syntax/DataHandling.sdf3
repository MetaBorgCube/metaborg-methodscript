module DataHandling

imports
	Common
	MethodScript

context-free syntax
	
	// Statements.
	Statement.ProcDecl = <proc <PROC-ID>(<{IVarScopeParam ","}*>) {
		<Statement*>
	}>
	Statement.ProcDecl2 = <proc(<ProcIdArg><ProcParam*>) {
		<Statement*>
	}>
	Statement.ProcDeclLegacy = <proc(<ProcIdArg><ProcParam*>,
		<Statement+>
	)<SemiColon?>>
	ProcParam.ProcParam = <, <IVarScopeParam>>
	ProcIdArg.ProcIdArgString = <'<PROC-ID>'>
	ProcIdArg.ProcIdArgSmartString = <"<PROC-ID>">
	ProcIdArg.ProcIdArgBareString = PROC-ID
	
	// Array constructor expressions.
	Exp.Array = <array(<{ArrayEntry ","}*><COMMA?>)>
	Exp.AssocArray = <associative_array(<{ArrayEntry ","}*><COMMA?>)>
	ArrayEntry.ArrayLabelEntry = <<LABEL>: <Exp>>
	ArrayEntry.ArrayValEntry = Exp
	
	// Cast expressions.
	Exp.BoolCast = <boolean(<Exp>)>
	Exp.DoubleCast = <double(<Exp>)>
	Exp.IntCast = <integer(<Exp>)>
	Exp.StringCast = <string(<Exp>)>
	
	// Closure expressions.
	Exp.Closure = <closure(<{IVarScopeParam ","}*>) {
		<Statement*>
	}>
	Exp.ClosureLegacy = <closure(<ClosureParam*>
		<Statement+>
	)<SemiColon?>>
	Exp.IClosure = <iclosure(<{IVarScopeParam ","}*>) {
		<Statement*>
	}>
	Exp.IClosureLegacy = <iclosure(<ClosureParam*>
		<Statement+>
	)<SemiColon?>>
	Exp.RClosure = <rclosure(<{IVarScopeParam ","}*>) {
		<Statement*>
	}>
	Exp.RClosureLegacy = <rclosure(<ClosureParam*>
		<Statement+>
	)<SemiColon?>>
	ClosureParam.ClosureParam = <<IVarScopeParam>, > // TODO - Fix trailing whitespace if it matters for pretty-printing.
	
	// Assign statement expressions.
	SExp.IVarAssign         = <<CLASSTYPE-ID?><IVAR> = <Exp>>
	SExp.IVarAssignLegacy   = <assign(<IVarAssignCTypeLegacy?><IVAR>, <Exp>)>
	IVarAssignCTypeLegacy.IVarAssignCTypeLegacy = <<CLASSTYPE-ID>, >
	SExp.IVarAddAssign      = <<IVAR> += <Exp>>
	SExp.IVarSubtractAssign = <<IVAR> -= <Exp>>
	SExp.IVarMultiplyAssign = <<IVAR> *= <Exp>>
	SExp.IVarDivideAssign   = <<IVAR> /= <Exp>>
	SExp.IVarConcatAssign   = <<IVAR> .= <Exp>>
	
